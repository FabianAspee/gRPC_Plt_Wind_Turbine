// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
 
option csharp_namespace = "PltWindTurbine.Services.ObtainInfoTurbinesService";
package obtaininfoturbine;
import "Protos/UtilProto/utility.proto"; 

service ObtainInfoTurbines {
 
  rpc InfoFailureTurbine(stream CodeAndPeriodRequest) returns (stream CodeAndPeriodResponse);
  rpc GetNameTurbineAndSensor(stream TurbineOrSensor) returns (stream ResponseNameTurbineAndSensor);
  rpc GetChartSystem(WithoutMessage) returns (ChartSystemResponse);
  rpc GetErrorByTurbine(ErrorByTurbineRequest) returns (ErrorByTurbineResponse);
}

message ErrorByTurbineRequest{
	int32 idTurbine=1;
}

message InfoChart{
	int32 idChart=1;
	string nameChart=2;
}
message ChartSystemResponse{  
	repeated InfoChart info=1;
}

message ErrorByTurbineResponse{
	int32 idTurbine=1;
	repeated string errors=2;
}

message CodeAndPeriodRequest{
	oneof Action{
		OnlySerieByPeriodAndCode msg1 =1;
		SeriePeriodByCodeWithStandarDeviation msg2=2;
		OnlySerieByPeriodAndCodeWithWarning msg3 = 3;
		OnlySerieByOwnSeries msg4 = 4;
		OnlySerieByOwnSeriesWithWarning msg5 = 5; 
	}
}

message CodeAndPeriodResponse{
	oneof Action{
		StatusLoadInfo msg1=1;
		ResponseCodePeriod msg2=2;
	}
}

message ResponseNameTurbineAndSensor{
	oneof Action{
		InfoSensor msg1 = 1;
		InfoTurbine msg2= 2;
		AllInfoSensor msg3 = 3;
		AllInfoTurbine msg4= 4;
	}
}

message TurbineOrSensor{
	oneof Action{
		Turbine msg1=1;
		Sensor msg2=2;
	}
}

message Turbine{}

message Sensor{}

message WithoutMessage{}

message AllInfoSensor{
	repeated InfoSensor msg=1;
}

message AllInfoTurbine{ 
	repeated InfoTurbine msg=1;
}

message InfoSensor{
	int32 idSensor=1;
	string nameSensor=2;
	bool isOwn=3;
}

message InfoTurbine{
	int32 idTurbine=1;
	string nameTurbine=2;
}

message SeriePeriodByCodeWithStandarDeviation{
	OnlySerieByPeriodAndCode periodAndCode = 1;
}
 

message OnlySerieByPeriodAndCodeWithWarning{
	OnlySerieByPeriodAndCode info=1;
}

message OnlySerieByOwnSeries{
	OnlySerieByPeriodAndCode info=1;
}

message OnlySerieByOwnSeriesWithWarning{
	OnlySerieByPeriodAndCode info=1;
}

message OnlySerieByPeriodAndCode{
	int32 days =1;
	int32 qtaGraph=2;
	int32 code = 3;
	int32 idTurbine = 4;
	string nameTurbine=5;
	int32 idSensor=6;
	string nameSensor=7;
}


message ResponseCodePeriod{
	oneof Action{
		OnlySerieByPeriodAndCodeResponse msg = 1;
		SeriePeriodByCodeWithStandarDeviationResponse msg2 = 2;
		OnlySerieByPeriodAndCodeResponseWithWarning msg3 = 3;
	}
}

message StatusLoadInfo {
  string name = 1;
  utility.Status status = 2;
  string description = 3;
}

message OnlySerieByPeriodAndCodeResponse{ 
	string nameTurbine = 1;
	string nameSensor =2;
	bytes values =3;
	bool isFinish =4;
}

message OnlySerieByPeriodAndCodeResponseWithWarning{
	OnlySerieByPeriodAndCodeResponse msg1=1;
	bytes warning = 2;
	bytes originalWarning=3;
}

message SeriePeriodByCodeWithStandarDeviationResponse{
	OnlySerieByPeriodAndCodeResponse msg1=1;
	double standardDeviation = 2;
} 