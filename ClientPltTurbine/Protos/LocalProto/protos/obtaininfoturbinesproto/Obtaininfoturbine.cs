// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ObtainInfoTurbinesProto/obtaininfoturbine.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PltWindTurbine.Services.ObtainInfoTurbinesService {

  /// <summary>Holder for reflection information generated from Protos/ObtainInfoTurbinesProto/obtaininfoturbine.proto</summary>
  public static partial class ObtaininfoturbineReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/ObtainInfoTurbinesProto/obtaininfoturbine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ObtaininfoturbineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZQcm90b3MvT2J0YWluSW5mb1R1cmJpbmVzUHJvdG8vb2J0YWluaW5mb3R1",
            "cmJpbmUucHJvdG8SEW9idGFpbmluZm90dXJiaW5lGh5Qcm90b3MvVXRpbFBy",
            "b3RvL3V0aWxpdHkucHJvdG8iKgoVRXJyb3JCeVR1cmJpbmVSZXF1ZXN0EhEK",
            "CWlkVHVyYmluZRgBIAEoBSIvCglJbmZvQ2hhcnQSDwoHaWRDaGFydBgBIAEo",
            "BRIRCgluYW1lQ2hhcnQYAiABKAkiQQoTQ2hhcnRTeXN0ZW1SZXNwb25zZRIq",
            "CgRpbmZvGAEgAygLMhwub2J0YWluaW5mb3R1cmJpbmUuSW5mb0NoYXJ0IjsK",
            "FkVycm9yQnlUdXJiaW5lUmVzcG9uc2USEQoJaWRUdXJiaW5lGAEgASgFEg4K",
            "BmVycm9ycxgCIAMoCSLsAgoUQ29kZUFuZFBlcmlvZFJlcXVlc3QSOwoEbXNn",
            "MRgBIAEoCzIrLm9idGFpbmluZm90dXJiaW5lLk9ubHlTZXJpZUJ5UGVyaW9k",
            "QW5kQ29kZUgAEkgKBG1zZzIYAiABKAsyOC5vYnRhaW5pbmZvdHVyYmluZS5T",
            "ZXJpZVBlcmlvZEJ5Q29kZVdpdGhTdGFuZGFyRGV2aWF0aW9uSAASRgoEbXNn",
            "MxgDIAEoCzI2Lm9idGFpbmluZm90dXJiaW5lLk9ubHlTZXJpZUJ5UGVyaW9k",
            "QW5kQ29kZVdpdGhXYXJuaW5nSAASNwoEbXNnNBgEIAEoCzInLm9idGFpbmlu",
            "Zm90dXJiaW5lLk9ubHlTZXJpZUJ5T3duU2VyaWVzSAASQgoEbXNnNRgFIAEo",
            "CzIyLm9idGFpbmluZm90dXJiaW5lLk9ubHlTZXJpZUJ5T3duU2VyaWVzV2l0",
            "aFdhcm5pbmdIAEIICgZBY3Rpb24iiwEKFUNvZGVBbmRQZXJpb2RSZXNwb25z",
            "ZRIxCgRtc2cxGAEgASgLMiEub2J0YWluaW5mb3R1cmJpbmUuU3RhdHVzTG9h",
            "ZEluZm9IABI1CgRtc2cyGAIgASgLMiUub2J0YWluaW5mb3R1cmJpbmUuUmVz",
            "cG9uc2VDb2RlUGVyaW9kSABCCAoGQWN0aW9uIuwBChxSZXNwb25zZU5hbWVU",
            "dXJiaW5lQW5kU2Vuc29yEi0KBG1zZzEYASABKAsyHS5vYnRhaW5pbmZvdHVy",
            "YmluZS5JbmZvU2Vuc29ySAASLgoEbXNnMhgCIAEoCzIeLm9idGFpbmluZm90",
            "dXJiaW5lLkluZm9UdXJiaW5lSAASMAoEbXNnMxgDIAEoCzIgLm9idGFpbmlu",
            "Zm90dXJiaW5lLkFsbEluZm9TZW5zb3JIABIxCgRtc2c0GAQgASgLMiEub2J0",
            "YWluaW5mb3R1cmJpbmUuQWxsSW5mb1R1cmJpbmVIAEIICgZBY3Rpb24icgoP",
            "VHVyYmluZU9yU2Vuc29yEioKBG1zZzEYASABKAsyGi5vYnRhaW5pbmZvdHVy",
            "YmluZS5UdXJiaW5lSAASKQoEbXNnMhgCIAEoCzIZLm9idGFpbmluZm90dXJi",
            "aW5lLlNlbnNvckgAQggKBkFjdGlvbiIJCgdUdXJiaW5lIggKBlNlbnNvciIQ",
            "Cg5XaXRob3V0TWVzc2FnZSI7Cg1BbGxJbmZvU2Vuc29yEioKA21zZxgBIAMo",
            "CzIdLm9idGFpbmluZm90dXJiaW5lLkluZm9TZW5zb3IiPQoOQWxsSW5mb1R1",
            "cmJpbmUSKwoDbXNnGAEgAygLMh4ub2J0YWluaW5mb3R1cmJpbmUuSW5mb1R1",
            "cmJpbmUiQQoKSW5mb1NlbnNvchIQCghpZFNlbnNvchgBIAEoBRISCgpuYW1l",
            "U2Vuc29yGAIgASgJEg0KBWlzT3duGAMgASgIIjUKC0luZm9UdXJiaW5lEhEK",
            "CWlkVHVyYmluZRgBIAEoBRITCgtuYW1lVHVyYmluZRgCIAEoCSJrCiVTZXJp",
            "ZVBlcmlvZEJ5Q29kZVdpdGhTdGFuZGFyRGV2aWF0aW9uEkIKDXBlcmlvZEFu",
            "ZENvZGUYASABKAsyKy5vYnRhaW5pbmZvdHVyYmluZS5Pbmx5U2VyaWVCeVBl",
            "cmlvZEFuZENvZGUiYAojT25seVNlcmllQnlQZXJpb2RBbmRDb2RlV2l0aFdh",
            "cm5pbmcSOQoEaW5mbxgBIAEoCzIrLm9idGFpbmluZm90dXJiaW5lLk9ubHlT",
            "ZXJpZUJ5UGVyaW9kQW5kQ29kZSJRChRPbmx5U2VyaWVCeU93blNlcmllcxI5",
            "CgRpbmZvGAEgASgLMisub2J0YWluaW5mb3R1cmJpbmUuT25seVNlcmllQnlQ",
            "ZXJpb2RBbmRDb2RlIlwKH09ubHlTZXJpZUJ5T3duU2VyaWVzV2l0aFdhcm5p",
            "bmcSOQoEaW5mbxgBIAEoCzIrLm9idGFpbmluZm90dXJiaW5lLk9ubHlTZXJp",
            "ZUJ5UGVyaW9kQW5kQ29kZSKWAQoYT25seVNlcmllQnlQZXJpb2RBbmRDb2Rl",
            "EgwKBGRheXMYASABKAUSEAoIcXRhR3JhcGgYAiABKAUSDAoEY29kZRgDIAEo",
            "BRIRCglpZFR1cmJpbmUYBCABKAUSEwoLbmFtZVR1cmJpbmUYBSABKAkSEAoI",
            "aWRTZW5zb3IYBiABKAUSEgoKbmFtZVNlbnNvchgHIAEoCSKEAgoSUmVzcG9u",
            "c2VDb2RlUGVyaW9kEkIKA21zZxgBIAEoCzIzLm9idGFpbmluZm90dXJiaW5l",
            "Lk9ubHlTZXJpZUJ5UGVyaW9kQW5kQ29kZVJlc3BvbnNlSAASUAoEbXNnMhgC",
            "IAEoCzJALm9idGFpbmluZm90dXJiaW5lLlNlcmllUGVyaW9kQnlDb2RlV2l0",
            "aFN0YW5kYXJEZXZpYXRpb25SZXNwb25zZUgAEk4KBG1zZzMYAyABKAsyPi5v",
            "YnRhaW5pbmZvdHVyYmluZS5Pbmx5U2VyaWVCeVBlcmlvZEFuZENvZGVSZXNw",
            "b25zZVdpdGhXYXJuaW5nSABCCAoGQWN0aW9uIlQKDlN0YXR1c0xvYWRJbmZv",
            "EgwKBG5hbWUYASABKAkSHwoGc3RhdHVzGAIgASgOMg8udXRpbGl0eS5TdGF0",
            "dXMSEwoLZGVzY3JpcHRpb24YAyABKAkibQogT25seVNlcmllQnlQZXJpb2RB",
            "bmRDb2RlUmVzcG9uc2USEwoLbmFtZVR1cmJpbmUYASABKAkSEgoKbmFtZVNl",
            "bnNvchgCIAEoCRIOCgZ2YWx1ZXMYAyABKAwSEAoIaXNGaW5pc2gYBCABKAgi",
            "mgEKK09ubHlTZXJpZUJ5UGVyaW9kQW5kQ29kZVJlc3BvbnNlV2l0aFdhcm5p",
            "bmcSQQoEbXNnMRgBIAEoCzIzLm9idGFpbmluZm90dXJiaW5lLk9ubHlTZXJp",
            "ZUJ5UGVyaW9kQW5kQ29kZVJlc3BvbnNlEg8KB3dhcm5pbmcYAiABKAwSFwoP",
            "b3JpZ2luYWxXYXJuaW5nGAMgASgMIo0BCi1TZXJpZVBlcmlvZEJ5Q29kZVdp",
            "dGhTdGFuZGFyRGV2aWF0aW9uUmVzcG9uc2USQQoEbXNnMRgBIAEoCzIzLm9i",
            "dGFpbmluZm90dXJiaW5lLk9ubHlTZXJpZUJ5UGVyaW9kQW5kQ29kZVJlc3Bv",
            "bnNlEhkKEXN0YW5kYXJkRGV2aWF0aW9uGAIgASgBMrwDChJPYnRhaW5JbmZv",
            "VHVyYmluZXMSawoSSW5mb0ZhaWx1cmVUdXJiaW5lEicub2J0YWluaW5mb3R1",
            "cmJpbmUuQ29kZUFuZFBlcmlvZFJlcXVlc3QaKC5vYnRhaW5pbmZvdHVyYmlu",
            "ZS5Db2RlQW5kUGVyaW9kUmVzcG9uc2UoATABEnIKF0dldE5hbWVUdXJiaW5l",
            "QW5kU2Vuc29yEiIub2J0YWluaW5mb3R1cmJpbmUuVHVyYmluZU9yU2Vuc29y",
            "Gi8ub2J0YWluaW5mb3R1cmJpbmUuUmVzcG9uc2VOYW1lVHVyYmluZUFuZFNl",
            "bnNvcigBMAESWwoOR2V0Q2hhcnRTeXN0ZW0SIS5vYnRhaW5pbmZvdHVyYmlu",
            "ZS5XaXRob3V0TWVzc2FnZRomLm9idGFpbmluZm90dXJiaW5lLkNoYXJ0U3lz",
            "dGVtUmVzcG9uc2USaAoRR2V0RXJyb3JCeVR1cmJpbmUSKC5vYnRhaW5pbmZv",
            "dHVyYmluZS5FcnJvckJ5VHVyYmluZVJlcXVlc3QaKS5vYnRhaW5pbmZvdHVy",
            "YmluZS5FcnJvckJ5VHVyYmluZVJlc3BvbnNlQjSqAjFQbHRXaW5kVHVyYmlu",
            "ZS5TZXJ2aWNlcy5PYnRhaW5JbmZvVHVyYmluZXNTZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PltWindTurbine.Protos.UtilProto.UtilityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest), global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest.Parser, new[]{ "IdTurbine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart), global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart.Parser, new[]{ "IdChart", "NameChart" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse), global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse.Parser, new[]{ "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse), global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse.Parser, new[]{ "IdTurbine", "Errors" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest), global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest.Parser, new[]{ "Msg1", "Msg2", "Msg3", "Msg4", "Msg5" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse), global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse.Parser, new[]{ "Msg1", "Msg2" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor), global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor.Parser, new[]{ "Msg1", "Msg2", "Msg3", "Msg4" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor), global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor.Parser, new[]{ "Msg1", "Msg2" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine), global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor), global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage), global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor), global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor.Parser, new[]{ "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine), global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine.Parser, new[]{ "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor), global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor.Parser, new[]{ "IdSensor", "NameSensor", "IsOwn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine), global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine.Parser, new[]{ "IdTurbine", "NameTurbine" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation), global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation.Parser, new[]{ "PeriodAndCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning), global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning.Parser, new[]{ "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries), global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries.Parser, new[]{ "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning), global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning.Parser, new[]{ "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode), global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode.Parser, new[]{ "Days", "QtaGraph", "Code", "IdTurbine", "NameTurbine", "IdSensor", "NameSensor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod), global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod.Parser, new[]{ "Msg", "Msg2", "Msg3" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo), global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo.Parser, new[]{ "Name", "Status", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse), global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse.Parser, new[]{ "NameTurbine", "NameSensor", "Values", "IsFinish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning), global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning.Parser, new[]{ "Msg1", "Warning", "OriginalWarning" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse), global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse.Parser, new[]{ "Msg1", "StandardDeviation" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ErrorByTurbineRequest : pb::IMessage<ErrorByTurbineRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorByTurbineRequest> _parser = new pb::MessageParser<ErrorByTurbineRequest>(() => new ErrorByTurbineRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorByTurbineRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorByTurbineRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorByTurbineRequest(ErrorByTurbineRequest other) : this() {
      idTurbine_ = other.idTurbine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorByTurbineRequest Clone() {
      return new ErrorByTurbineRequest(this);
    }

    /// <summary>Field number for the "idTurbine" field.</summary>
    public const int IdTurbineFieldNumber = 1;
    private int idTurbine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTurbine {
      get { return idTurbine_; }
      set {
        idTurbine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorByTurbineRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorByTurbineRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdTurbine != other.IdTurbine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdTurbine != 0) hash ^= IdTurbine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdTurbine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdTurbine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdTurbine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdTurbine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdTurbine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTurbine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorByTurbineRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdTurbine != 0) {
        IdTurbine = other.IdTurbine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdTurbine = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdTurbine = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InfoChart : pb::IMessage<InfoChart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfoChart> _parser = new pb::MessageParser<InfoChart>(() => new InfoChart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoChart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoChart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoChart(InfoChart other) : this() {
      idChart_ = other.idChart_;
      nameChart_ = other.nameChart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoChart Clone() {
      return new InfoChart(this);
    }

    /// <summary>Field number for the "idChart" field.</summary>
    public const int IdChartFieldNumber = 1;
    private int idChart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdChart {
      get { return idChart_; }
      set {
        idChart_ = value;
      }
    }

    /// <summary>Field number for the "nameChart" field.</summary>
    public const int NameChartFieldNumber = 2;
    private string nameChart_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameChart {
      get { return nameChart_; }
      set {
        nameChart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoChart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoChart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdChart != other.IdChart) return false;
      if (NameChart != other.NameChart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdChart != 0) hash ^= IdChart.GetHashCode();
      if (NameChart.Length != 0) hash ^= NameChart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdChart != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdChart);
      }
      if (NameChart.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameChart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdChart != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdChart);
      }
      if (NameChart.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameChart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdChart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdChart);
      }
      if (NameChart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameChart);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoChart other) {
      if (other == null) {
        return;
      }
      if (other.IdChart != 0) {
        IdChart = other.IdChart;
      }
      if (other.NameChart.Length != 0) {
        NameChart = other.NameChart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdChart = input.ReadInt32();
            break;
          }
          case 18: {
            NameChart = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdChart = input.ReadInt32();
            break;
          }
          case 18: {
            NameChart = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChartSystemResponse : pb::IMessage<ChartSystemResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChartSystemResponse> _parser = new pb::MessageParser<ChartSystemResponse>(() => new ChartSystemResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChartSystemResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartSystemResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartSystemResponse(ChartSystemResponse other) : this() {
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartSystemResponse Clone() {
      return new ChartSystemResponse(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart.Parser);
    private readonly pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart> info_ = new pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoChart> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChartSystemResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChartSystemResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      info_.WriteTo(ref output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChartSystemResponse other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            info_.AddEntriesFrom(ref input, _repeated_info_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ErrorByTurbineResponse : pb::IMessage<ErrorByTurbineResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorByTurbineResponse> _parser = new pb::MessageParser<ErrorByTurbineResponse>(() => new ErrorByTurbineResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorByTurbineResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorByTurbineResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorByTurbineResponse(ErrorByTurbineResponse other) : this() {
      idTurbine_ = other.idTurbine_;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorByTurbineResponse Clone() {
      return new ErrorByTurbineResponse(this);
    }

    /// <summary>Field number for the "idTurbine" field.</summary>
    public const int IdTurbineFieldNumber = 1;
    private int idTurbine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTurbine {
      get { return idTurbine_; }
      set {
        idTurbine_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorByTurbineResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorByTurbineResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdTurbine != other.IdTurbine) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdTurbine != 0) hash ^= IdTurbine.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdTurbine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdTurbine);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdTurbine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdTurbine);
      }
      errors_.WriteTo(ref output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdTurbine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTurbine);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorByTurbineResponse other) {
      if (other == null) {
        return;
      }
      if (other.IdTurbine != 0) {
        IdTurbine = other.IdTurbine;
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdTurbine = input.ReadInt32();
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdTurbine = input.ReadInt32();
            break;
          }
          case 18: {
            errors_.AddEntriesFrom(ref input, _repeated_errors_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CodeAndPeriodRequest : pb::IMessage<CodeAndPeriodRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CodeAndPeriodRequest> _parser = new pb::MessageParser<CodeAndPeriodRequest>(() => new CodeAndPeriodRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CodeAndPeriodRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeAndPeriodRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeAndPeriodRequest(CodeAndPeriodRequest other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          Msg1 = other.Msg1.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
        case ActionOneofCase.Msg3:
          Msg3 = other.Msg3.Clone();
          break;
        case ActionOneofCase.Msg4:
          Msg4 = other.Msg4.Clone();
          break;
        case ActionOneofCase.Msg5:
          Msg5 = other.Msg5.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeAndPeriodRequest Clone() {
      return new CodeAndPeriodRequest(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode Msg1 {
      get { return actionCase_ == ActionOneofCase.Msg1 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg1;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    /// <summary>Field number for the "msg3" field.</summary>
    public const int Msg3FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning Msg3 {
      get { return actionCase_ == ActionOneofCase.Msg3 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg3;
      }
    }

    /// <summary>Field number for the "msg4" field.</summary>
    public const int Msg4FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries Msg4 {
      get { return actionCase_ == ActionOneofCase.Msg4 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg4;
      }
    }

    /// <summary>Field number for the "msg5" field.</summary>
    public const int Msg5FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning Msg5 {
      get { return actionCase_ == ActionOneofCase.Msg5 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg5;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg1 = 1,
      Msg2 = 2,
      Msg3 = 3,
      Msg4 = 4,
      Msg5 = 5,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CodeAndPeriodRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CodeAndPeriodRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (!object.Equals(Msg3, other.Msg3)) return false;
      if (!object.Equals(Msg4, other.Msg4)) return false;
      if (!object.Equals(Msg5, other.Msg5)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg1) hash ^= Msg1.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg3) hash ^= Msg3.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg4) hash ^= Msg4.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg5) hash ^= Msg5.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg4);
      }
      if (actionCase_ == ActionOneofCase.Msg5) {
        output.WriteRawTag(42);
        output.WriteMessage(Msg5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg4);
      }
      if (actionCase_ == ActionOneofCase.Msg5) {
        output.WriteRawTag(42);
        output.WriteMessage(Msg5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg1) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg4);
      }
      if (actionCase_ == ActionOneofCase.Msg5) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg5);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CodeAndPeriodRequest other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          if (Msg1 == null) {
            Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
          }
          Msg1.MergeFrom(other.Msg1);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
        case ActionOneofCase.Msg3:
          if (Msg3 == null) {
            Msg3 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning();
          }
          Msg3.MergeFrom(other.Msg3);
          break;
        case ActionOneofCase.Msg4:
          if (Msg4 == null) {
            Msg4 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries();
          }
          Msg4.MergeFrom(other.Msg4);
          break;
        case ActionOneofCase.Msg5:
          if (Msg5 == null) {
            Msg5 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning();
          }
          Msg5.MergeFrom(other.Msg5);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
          case 34: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries();
            if (actionCase_ == ActionOneofCase.Msg4) {
              subBuilder.MergeFrom(Msg4);
            }
            input.ReadMessage(subBuilder);
            Msg4 = subBuilder;
            break;
          }
          case 42: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning();
            if (actionCase_ == ActionOneofCase.Msg5) {
              subBuilder.MergeFrom(Msg5);
            }
            input.ReadMessage(subBuilder);
            Msg5 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviation();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeWithWarning();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
          case 34: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeries();
            if (actionCase_ == ActionOneofCase.Msg4) {
              subBuilder.MergeFrom(Msg4);
            }
            input.ReadMessage(subBuilder);
            Msg4 = subBuilder;
            break;
          }
          case 42: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByOwnSeriesWithWarning();
            if (actionCase_ == ActionOneofCase.Msg5) {
              subBuilder.MergeFrom(Msg5);
            }
            input.ReadMessage(subBuilder);
            Msg5 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CodeAndPeriodResponse : pb::IMessage<CodeAndPeriodResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CodeAndPeriodResponse> _parser = new pb::MessageParser<CodeAndPeriodResponse>(() => new CodeAndPeriodResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CodeAndPeriodResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeAndPeriodResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeAndPeriodResponse(CodeAndPeriodResponse other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          Msg1 = other.Msg1.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeAndPeriodResponse Clone() {
      return new CodeAndPeriodResponse(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo Msg1 {
      get { return actionCase_ == ActionOneofCase.Msg1 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg1;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg1 = 1,
      Msg2 = 2,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CodeAndPeriodResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CodeAndPeriodResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg1) hash ^= Msg1.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg1) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CodeAndPeriodResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          if (Msg1 == null) {
            Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo();
          }
          Msg1.MergeFrom(other.Msg1);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.StatusLoadInfo();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseCodePeriod();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ResponseNameTurbineAndSensor : pb::IMessage<ResponseNameTurbineAndSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResponseNameTurbineAndSensor> _parser = new pb::MessageParser<ResponseNameTurbineAndSensor>(() => new ResponseNameTurbineAndSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseNameTurbineAndSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseNameTurbineAndSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseNameTurbineAndSensor(ResponseNameTurbineAndSensor other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          Msg1 = other.Msg1.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
        case ActionOneofCase.Msg3:
          Msg3 = other.Msg3.Clone();
          break;
        case ActionOneofCase.Msg4:
          Msg4 = other.Msg4.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseNameTurbineAndSensor Clone() {
      return new ResponseNameTurbineAndSensor(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor Msg1 {
      get { return actionCase_ == ActionOneofCase.Msg1 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg1;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    /// <summary>Field number for the "msg3" field.</summary>
    public const int Msg3FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor Msg3 {
      get { return actionCase_ == ActionOneofCase.Msg3 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg3;
      }
    }

    /// <summary>Field number for the "msg4" field.</summary>
    public const int Msg4FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine Msg4 {
      get { return actionCase_ == ActionOneofCase.Msg4 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg4;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg1 = 1,
      Msg2 = 2,
      Msg3 = 3,
      Msg4 = 4,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseNameTurbineAndSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseNameTurbineAndSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (!object.Equals(Msg3, other.Msg3)) return false;
      if (!object.Equals(Msg4, other.Msg4)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg1) hash ^= Msg1.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg3) hash ^= Msg3.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg4) hash ^= Msg4.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg4);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg4);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg1) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg4);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseNameTurbineAndSensor other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          if (Msg1 == null) {
            Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor();
          }
          Msg1.MergeFrom(other.Msg1);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
        case ActionOneofCase.Msg3:
          if (Msg3 == null) {
            Msg3 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor();
          }
          Msg3.MergeFrom(other.Msg3);
          break;
        case ActionOneofCase.Msg4:
          if (Msg4 == null) {
            Msg4 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine();
          }
          Msg4.MergeFrom(other.Msg4);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
          case 34: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine();
            if (actionCase_ == ActionOneofCase.Msg4) {
              subBuilder.MergeFrom(Msg4);
            }
            input.ReadMessage(subBuilder);
            Msg4 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoSensor();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
          case 34: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.AllInfoTurbine();
            if (actionCase_ == ActionOneofCase.Msg4) {
              subBuilder.MergeFrom(Msg4);
            }
            input.ReadMessage(subBuilder);
            Msg4 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TurbineOrSensor : pb::IMessage<TurbineOrSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TurbineOrSensor> _parser = new pb::MessageParser<TurbineOrSensor>(() => new TurbineOrSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurbineOrSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurbineOrSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurbineOrSensor(TurbineOrSensor other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          Msg1 = other.Msg1.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurbineOrSensor Clone() {
      return new TurbineOrSensor(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine Msg1 {
      get { return actionCase_ == ActionOneofCase.Msg1 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg1;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg1 = 1,
      Msg2 = 2,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurbineOrSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurbineOrSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg1) hash ^= Msg1.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg1) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurbineOrSensor other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          if (Msg1 == null) {
            Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine();
          }
          Msg1.MergeFrom(other.Msg1);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.Turbine();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.Sensor();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Turbine : pb::IMessage<Turbine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Turbine> _parser = new pb::MessageParser<Turbine>(() => new Turbine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Turbine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turbine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turbine(Turbine other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Turbine Clone() {
      return new Turbine(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Turbine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Turbine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Turbine other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class Sensor : pb::IMessage<Sensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sensor> _parser = new pb::MessageParser<Sensor>(() => new Sensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sensor(Sensor other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sensor Clone() {
      return new Sensor(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sensor other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class WithoutMessage : pb::IMessage<WithoutMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WithoutMessage> _parser = new pb::MessageParser<WithoutMessage>(() => new WithoutMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithoutMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithoutMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithoutMessage(WithoutMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithoutMessage Clone() {
      return new WithoutMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithoutMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithoutMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithoutMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class AllInfoSensor : pb::IMessage<AllInfoSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllInfoSensor> _parser = new pb::MessageParser<AllInfoSensor>(() => new AllInfoSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllInfoSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllInfoSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllInfoSensor(AllInfoSensor other) : this() {
      msg_ = other.msg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllInfoSensor Clone() {
      return new AllInfoSensor(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor> _repeated_msg_codec
        = pb::FieldCodec.ForMessage(10, global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor.Parser);
    private readonly pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor> msg_ = new pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoSensor> Msg {
      get { return msg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllInfoSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllInfoSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!msg_.Equals(other.msg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= msg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      msg_.WriteTo(output, _repeated_msg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      msg_.WriteTo(ref output, _repeated_msg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += msg_.CalculateSize(_repeated_msg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllInfoSensor other) {
      if (other == null) {
        return;
      }
      msg_.Add(other.msg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            msg_.AddEntriesFrom(input, _repeated_msg_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            msg_.AddEntriesFrom(ref input, _repeated_msg_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AllInfoTurbine : pb::IMessage<AllInfoTurbine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllInfoTurbine> _parser = new pb::MessageParser<AllInfoTurbine>(() => new AllInfoTurbine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllInfoTurbine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllInfoTurbine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllInfoTurbine(AllInfoTurbine other) : this() {
      msg_ = other.msg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllInfoTurbine Clone() {
      return new AllInfoTurbine(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine> _repeated_msg_codec
        = pb::FieldCodec.ForMessage(10, global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine.Parser);
    private readonly pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine> msg_ = new pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PltWindTurbine.Services.ObtainInfoTurbinesService.InfoTurbine> Msg {
      get { return msg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllInfoTurbine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllInfoTurbine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!msg_.Equals(other.msg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= msg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      msg_.WriteTo(output, _repeated_msg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      msg_.WriteTo(ref output, _repeated_msg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += msg_.CalculateSize(_repeated_msg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllInfoTurbine other) {
      if (other == null) {
        return;
      }
      msg_.Add(other.msg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            msg_.AddEntriesFrom(input, _repeated_msg_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            msg_.AddEntriesFrom(ref input, _repeated_msg_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InfoSensor : pb::IMessage<InfoSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfoSensor> _parser = new pb::MessageParser<InfoSensor>(() => new InfoSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoSensor(InfoSensor other) : this() {
      idSensor_ = other.idSensor_;
      nameSensor_ = other.nameSensor_;
      isOwn_ = other.isOwn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoSensor Clone() {
      return new InfoSensor(this);
    }

    /// <summary>Field number for the "idSensor" field.</summary>
    public const int IdSensorFieldNumber = 1;
    private int idSensor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdSensor {
      get { return idSensor_; }
      set {
        idSensor_ = value;
      }
    }

    /// <summary>Field number for the "nameSensor" field.</summary>
    public const int NameSensorFieldNumber = 2;
    private string nameSensor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameSensor {
      get { return nameSensor_; }
      set {
        nameSensor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isOwn" field.</summary>
    public const int IsOwnFieldNumber = 3;
    private bool isOwn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOwn {
      get { return isOwn_; }
      set {
        isOwn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdSensor != other.IdSensor) return false;
      if (NameSensor != other.NameSensor) return false;
      if (IsOwn != other.IsOwn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdSensor != 0) hash ^= IdSensor.GetHashCode();
      if (NameSensor.Length != 0) hash ^= NameSensor.GetHashCode();
      if (IsOwn != false) hash ^= IsOwn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdSensor != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdSensor);
      }
      if (NameSensor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameSensor);
      }
      if (IsOwn != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOwn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdSensor != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdSensor);
      }
      if (NameSensor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameSensor);
      }
      if (IsOwn != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOwn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdSensor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdSensor);
      }
      if (NameSensor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameSensor);
      }
      if (IsOwn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoSensor other) {
      if (other == null) {
        return;
      }
      if (other.IdSensor != 0) {
        IdSensor = other.IdSensor;
      }
      if (other.NameSensor.Length != 0) {
        NameSensor = other.NameSensor;
      }
      if (other.IsOwn != false) {
        IsOwn = other.IsOwn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdSensor = input.ReadInt32();
            break;
          }
          case 18: {
            NameSensor = input.ReadString();
            break;
          }
          case 24: {
            IsOwn = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdSensor = input.ReadInt32();
            break;
          }
          case 18: {
            NameSensor = input.ReadString();
            break;
          }
          case 24: {
            IsOwn = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InfoTurbine : pb::IMessage<InfoTurbine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfoTurbine> _parser = new pb::MessageParser<InfoTurbine>(() => new InfoTurbine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTurbine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTurbine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTurbine(InfoTurbine other) : this() {
      idTurbine_ = other.idTurbine_;
      nameTurbine_ = other.nameTurbine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTurbine Clone() {
      return new InfoTurbine(this);
    }

    /// <summary>Field number for the "idTurbine" field.</summary>
    public const int IdTurbineFieldNumber = 1;
    private int idTurbine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTurbine {
      get { return idTurbine_; }
      set {
        idTurbine_ = value;
      }
    }

    /// <summary>Field number for the "nameTurbine" field.</summary>
    public const int NameTurbineFieldNumber = 2;
    private string nameTurbine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTurbine {
      get { return nameTurbine_; }
      set {
        nameTurbine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTurbine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTurbine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdTurbine != other.IdTurbine) return false;
      if (NameTurbine != other.NameTurbine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdTurbine != 0) hash ^= IdTurbine.GetHashCode();
      if (NameTurbine.Length != 0) hash ^= NameTurbine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdTurbine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdTurbine);
      }
      if (NameTurbine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTurbine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdTurbine != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IdTurbine);
      }
      if (NameTurbine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTurbine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdTurbine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTurbine);
      }
      if (NameTurbine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTurbine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTurbine other) {
      if (other == null) {
        return;
      }
      if (other.IdTurbine != 0) {
        IdTurbine = other.IdTurbine;
      }
      if (other.NameTurbine.Length != 0) {
        NameTurbine = other.NameTurbine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdTurbine = input.ReadInt32();
            break;
          }
          case 18: {
            NameTurbine = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdTurbine = input.ReadInt32();
            break;
          }
          case 18: {
            NameTurbine = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SeriePeriodByCodeWithStandarDeviation : pb::IMessage<SeriePeriodByCodeWithStandarDeviation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SeriePeriodByCodeWithStandarDeviation> _parser = new pb::MessageParser<SeriePeriodByCodeWithStandarDeviation>(() => new SeriePeriodByCodeWithStandarDeviation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeriePeriodByCodeWithStandarDeviation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeriePeriodByCodeWithStandarDeviation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeriePeriodByCodeWithStandarDeviation(SeriePeriodByCodeWithStandarDeviation other) : this() {
      periodAndCode_ = other.periodAndCode_ != null ? other.periodAndCode_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeriePeriodByCodeWithStandarDeviation Clone() {
      return new SeriePeriodByCodeWithStandarDeviation(this);
    }

    /// <summary>Field number for the "periodAndCode" field.</summary>
    public const int PeriodAndCodeFieldNumber = 1;
    private global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode periodAndCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode PeriodAndCode {
      get { return periodAndCode_; }
      set {
        periodAndCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeriePeriodByCodeWithStandarDeviation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeriePeriodByCodeWithStandarDeviation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PeriodAndCode, other.PeriodAndCode)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (periodAndCode_ != null) hash ^= PeriodAndCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (periodAndCode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PeriodAndCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (periodAndCode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PeriodAndCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (periodAndCode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PeriodAndCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeriePeriodByCodeWithStandarDeviation other) {
      if (other == null) {
        return;
      }
      if (other.periodAndCode_ != null) {
        if (periodAndCode_ == null) {
          PeriodAndCode = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
        }
        PeriodAndCode.MergeFrom(other.PeriodAndCode);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (periodAndCode_ == null) {
              PeriodAndCode = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(PeriodAndCode);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (periodAndCode_ == null) {
              PeriodAndCode = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(PeriodAndCode);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OnlySerieByPeriodAndCodeWithWarning : pb::IMessage<OnlySerieByPeriodAndCodeWithWarning>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OnlySerieByPeriodAndCodeWithWarning> _parser = new pb::MessageParser<OnlySerieByPeriodAndCodeWithWarning>(() => new OnlySerieByPeriodAndCodeWithWarning());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlySerieByPeriodAndCodeWithWarning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeWithWarning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeWithWarning(OnlySerieByPeriodAndCodeWithWarning other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeWithWarning Clone() {
      return new OnlySerieByPeriodAndCodeWithWarning(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlySerieByPeriodAndCodeWithWarning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlySerieByPeriodAndCodeWithWarning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlySerieByPeriodAndCodeWithWarning other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OnlySerieByOwnSeries : pb::IMessage<OnlySerieByOwnSeries>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OnlySerieByOwnSeries> _parser = new pb::MessageParser<OnlySerieByOwnSeries>(() => new OnlySerieByOwnSeries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlySerieByOwnSeries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByOwnSeries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByOwnSeries(OnlySerieByOwnSeries other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByOwnSeries Clone() {
      return new OnlySerieByOwnSeries(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlySerieByOwnSeries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlySerieByOwnSeries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlySerieByOwnSeries other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OnlySerieByOwnSeriesWithWarning : pb::IMessage<OnlySerieByOwnSeriesWithWarning>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OnlySerieByOwnSeriesWithWarning> _parser = new pb::MessageParser<OnlySerieByOwnSeriesWithWarning>(() => new OnlySerieByOwnSeriesWithWarning());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlySerieByOwnSeriesWithWarning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByOwnSeriesWithWarning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByOwnSeriesWithWarning(OnlySerieByOwnSeriesWithWarning other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByOwnSeriesWithWarning Clone() {
      return new OnlySerieByOwnSeriesWithWarning(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlySerieByOwnSeriesWithWarning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlySerieByOwnSeriesWithWarning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlySerieByOwnSeriesWithWarning other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCode();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OnlySerieByPeriodAndCode : pb::IMessage<OnlySerieByPeriodAndCode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OnlySerieByPeriodAndCode> _parser = new pb::MessageParser<OnlySerieByPeriodAndCode>(() => new OnlySerieByPeriodAndCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlySerieByPeriodAndCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCode(OnlySerieByPeriodAndCode other) : this() {
      days_ = other.days_;
      qtaGraph_ = other.qtaGraph_;
      code_ = other.code_;
      idTurbine_ = other.idTurbine_;
      nameTurbine_ = other.nameTurbine_;
      idSensor_ = other.idSensor_;
      nameSensor_ = other.nameSensor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCode Clone() {
      return new OnlySerieByPeriodAndCode(this);
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 1;
    private int days_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    /// <summary>Field number for the "qtaGraph" field.</summary>
    public const int QtaGraphFieldNumber = 2;
    private int qtaGraph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QtaGraph {
      get { return qtaGraph_; }
      set {
        qtaGraph_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "idTurbine" field.</summary>
    public const int IdTurbineFieldNumber = 4;
    private int idTurbine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTurbine {
      get { return idTurbine_; }
      set {
        idTurbine_ = value;
      }
    }

    /// <summary>Field number for the "nameTurbine" field.</summary>
    public const int NameTurbineFieldNumber = 5;
    private string nameTurbine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTurbine {
      get { return nameTurbine_; }
      set {
        nameTurbine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idSensor" field.</summary>
    public const int IdSensorFieldNumber = 6;
    private int idSensor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdSensor {
      get { return idSensor_; }
      set {
        idSensor_ = value;
      }
    }

    /// <summary>Field number for the "nameSensor" field.</summary>
    public const int NameSensorFieldNumber = 7;
    private string nameSensor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameSensor {
      get { return nameSensor_; }
      set {
        nameSensor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlySerieByPeriodAndCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlySerieByPeriodAndCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Days != other.Days) return false;
      if (QtaGraph != other.QtaGraph) return false;
      if (Code != other.Code) return false;
      if (IdTurbine != other.IdTurbine) return false;
      if (NameTurbine != other.NameTurbine) return false;
      if (IdSensor != other.IdSensor) return false;
      if (NameSensor != other.NameSensor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Days != 0) hash ^= Days.GetHashCode();
      if (QtaGraph != 0) hash ^= QtaGraph.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (IdTurbine != 0) hash ^= IdTurbine.GetHashCode();
      if (NameTurbine.Length != 0) hash ^= NameTurbine.GetHashCode();
      if (IdSensor != 0) hash ^= IdSensor.GetHashCode();
      if (NameSensor.Length != 0) hash ^= NameSensor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Days != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Days);
      }
      if (QtaGraph != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(QtaGraph);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (IdTurbine != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IdTurbine);
      }
      if (NameTurbine.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameTurbine);
      }
      if (IdSensor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IdSensor);
      }
      if (NameSensor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NameSensor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Days != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Days);
      }
      if (QtaGraph != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(QtaGraph);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (IdTurbine != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IdTurbine);
      }
      if (NameTurbine.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameTurbine);
      }
      if (IdSensor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IdSensor);
      }
      if (NameSensor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NameSensor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Days != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
      }
      if (QtaGraph != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QtaGraph);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (IdTurbine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTurbine);
      }
      if (NameTurbine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTurbine);
      }
      if (IdSensor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdSensor);
      }
      if (NameSensor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameSensor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlySerieByPeriodAndCode other) {
      if (other == null) {
        return;
      }
      if (other.Days != 0) {
        Days = other.Days;
      }
      if (other.QtaGraph != 0) {
        QtaGraph = other.QtaGraph;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.IdTurbine != 0) {
        IdTurbine = other.IdTurbine;
      }
      if (other.NameTurbine.Length != 0) {
        NameTurbine = other.NameTurbine;
      }
      if (other.IdSensor != 0) {
        IdSensor = other.IdSensor;
      }
      if (other.NameSensor.Length != 0) {
        NameSensor = other.NameSensor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Days = input.ReadInt32();
            break;
          }
          case 16: {
            QtaGraph = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            IdTurbine = input.ReadInt32();
            break;
          }
          case 42: {
            NameTurbine = input.ReadString();
            break;
          }
          case 48: {
            IdSensor = input.ReadInt32();
            break;
          }
          case 58: {
            NameSensor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Days = input.ReadInt32();
            break;
          }
          case 16: {
            QtaGraph = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 32: {
            IdTurbine = input.ReadInt32();
            break;
          }
          case 42: {
            NameTurbine = input.ReadString();
            break;
          }
          case 48: {
            IdSensor = input.ReadInt32();
            break;
          }
          case 58: {
            NameSensor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ResponseCodePeriod : pb::IMessage<ResponseCodePeriod>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResponseCodePeriod> _parser = new pb::MessageParser<ResponseCodePeriod>(() => new ResponseCodePeriod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseCodePeriod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCodePeriod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCodePeriod(ResponseCodePeriod other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.Msg:
          Msg = other.Msg.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
        case ActionOneofCase.Msg3:
          Msg3 = other.Msg3.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCodePeriod Clone() {
      return new ResponseCodePeriod(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse Msg {
      get { return actionCase_ == ActionOneofCase.Msg ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    /// <summary>Field number for the "msg3" field.</summary>
    public const int Msg3FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning Msg3 {
      get { return actionCase_ == ActionOneofCase.Msg3 ? (global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg3;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg = 1,
      Msg2 = 2,
      Msg3 = 3,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseCodePeriod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseCodePeriod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg, other.Msg)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (!object.Equals(Msg3, other.Msg3)) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg) hash ^= Msg.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg3) hash ^= Msg3.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseCodePeriod other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg:
          if (Msg == null) {
            Msg = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
          }
          Msg.MergeFrom(other.Msg);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
        case ActionOneofCase.Msg3:
          if (Msg3 == null) {
            Msg3 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning();
          }
          Msg3.MergeFrom(other.Msg3);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
            if (actionCase_ == ActionOneofCase.Msg) {
              subBuilder.MergeFrom(Msg);
            }
            input.ReadMessage(subBuilder);
            Msg = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
            if (actionCase_ == ActionOneofCase.Msg) {
              subBuilder.MergeFrom(Msg);
            }
            input.ReadMessage(subBuilder);
            Msg = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.SeriePeriodByCodeWithStandarDeviationResponse();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning subBuilder = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponseWithWarning();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StatusLoadInfo : pb::IMessage<StatusLoadInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusLoadInfo> _parser = new pb::MessageParser<StatusLoadInfo>(() => new StatusLoadInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusLoadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusLoadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusLoadInfo(StatusLoadInfo other) : this() {
      name_ = other.name_;
      status_ = other.status_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusLoadInfo Clone() {
      return new StatusLoadInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::PltWindTurbine.Protos.UtilProto.Status status_ = global::PltWindTurbine.Protos.UtilProto.Status.Pending;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Protos.UtilProto.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusLoadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusLoadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) hash ^= Status.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusLoadInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        Status = other.Status;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::PltWindTurbine.Protos.UtilProto.Status) input.ReadEnum();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::PltWindTurbine.Protos.UtilProto.Status) input.ReadEnum();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OnlySerieByPeriodAndCodeResponse : pb::IMessage<OnlySerieByPeriodAndCodeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OnlySerieByPeriodAndCodeResponse> _parser = new pb::MessageParser<OnlySerieByPeriodAndCodeResponse>(() => new OnlySerieByPeriodAndCodeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlySerieByPeriodAndCodeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeResponse(OnlySerieByPeriodAndCodeResponse other) : this() {
      nameTurbine_ = other.nameTurbine_;
      nameSensor_ = other.nameSensor_;
      values_ = other.values_;
      isFinish_ = other.isFinish_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeResponse Clone() {
      return new OnlySerieByPeriodAndCodeResponse(this);
    }

    /// <summary>Field number for the "nameTurbine" field.</summary>
    public const int NameTurbineFieldNumber = 1;
    private string nameTurbine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTurbine {
      get { return nameTurbine_; }
      set {
        nameTurbine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nameSensor" field.</summary>
    public const int NameSensorFieldNumber = 2;
    private string nameSensor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameSensor {
      get { return nameSensor_; }
      set {
        nameSensor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private pb::ByteString values_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Values {
      get { return values_; }
      set {
        values_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isFinish" field.</summary>
    public const int IsFinishFieldNumber = 4;
    private bool isFinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlySerieByPeriodAndCodeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlySerieByPeriodAndCodeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NameTurbine != other.NameTurbine) return false;
      if (NameSensor != other.NameSensor) return false;
      if (Values != other.Values) return false;
      if (IsFinish != other.IsFinish) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NameTurbine.Length != 0) hash ^= NameTurbine.GetHashCode();
      if (NameSensor.Length != 0) hash ^= NameSensor.GetHashCode();
      if (Values.Length != 0) hash ^= Values.GetHashCode();
      if (IsFinish != false) hash ^= IsFinish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NameTurbine.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NameTurbine);
      }
      if (NameSensor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameSensor);
      }
      if (Values.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Values);
      }
      if (IsFinish != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NameTurbine.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NameTurbine);
      }
      if (NameSensor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameSensor);
      }
      if (Values.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Values);
      }
      if (IsFinish != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NameTurbine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTurbine);
      }
      if (NameSensor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameSensor);
      }
      if (Values.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Values);
      }
      if (IsFinish != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlySerieByPeriodAndCodeResponse other) {
      if (other == null) {
        return;
      }
      if (other.NameTurbine.Length != 0) {
        NameTurbine = other.NameTurbine;
      }
      if (other.NameSensor.Length != 0) {
        NameSensor = other.NameSensor;
      }
      if (other.Values.Length != 0) {
        Values = other.Values;
      }
      if (other.IsFinish != false) {
        IsFinish = other.IsFinish;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NameTurbine = input.ReadString();
            break;
          }
          case 18: {
            NameSensor = input.ReadString();
            break;
          }
          case 26: {
            Values = input.ReadBytes();
            break;
          }
          case 32: {
            IsFinish = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NameTurbine = input.ReadString();
            break;
          }
          case 18: {
            NameSensor = input.ReadString();
            break;
          }
          case 26: {
            Values = input.ReadBytes();
            break;
          }
          case 32: {
            IsFinish = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OnlySerieByPeriodAndCodeResponseWithWarning : pb::IMessage<OnlySerieByPeriodAndCodeResponseWithWarning>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OnlySerieByPeriodAndCodeResponseWithWarning> _parser = new pb::MessageParser<OnlySerieByPeriodAndCodeResponseWithWarning>(() => new OnlySerieByPeriodAndCodeResponseWithWarning());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlySerieByPeriodAndCodeResponseWithWarning> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeResponseWithWarning() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeResponseWithWarning(OnlySerieByPeriodAndCodeResponseWithWarning other) : this() {
      msg1_ = other.msg1_ != null ? other.msg1_.Clone() : null;
      warning_ = other.warning_;
      originalWarning_ = other.originalWarning_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlySerieByPeriodAndCodeResponseWithWarning Clone() {
      return new OnlySerieByPeriodAndCodeResponseWithWarning(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    private global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse msg1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse Msg1 {
      get { return msg1_; }
      set {
        msg1_ = value;
      }
    }

    /// <summary>Field number for the "warning" field.</summary>
    public const int WarningFieldNumber = 2;
    private pb::ByteString warning_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Warning {
      get { return warning_; }
      set {
        warning_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "originalWarning" field.</summary>
    public const int OriginalWarningFieldNumber = 3;
    private pb::ByteString originalWarning_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginalWarning {
      get { return originalWarning_; }
      set {
        originalWarning_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlySerieByPeriodAndCodeResponseWithWarning);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlySerieByPeriodAndCodeResponseWithWarning other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (Warning != other.Warning) return false;
      if (OriginalWarning != other.OriginalWarning) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msg1_ != null) hash ^= Msg1.GetHashCode();
      if (Warning.Length != 0) hash ^= Warning.GetHashCode();
      if (OriginalWarning.Length != 0) hash ^= OriginalWarning.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (msg1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (Warning.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Warning);
      }
      if (OriginalWarning.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OriginalWarning);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (msg1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (Warning.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Warning);
      }
      if (OriginalWarning.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OriginalWarning);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msg1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (Warning.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Warning);
      }
      if (OriginalWarning.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginalWarning);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlySerieByPeriodAndCodeResponseWithWarning other) {
      if (other == null) {
        return;
      }
      if (other.msg1_ != null) {
        if (msg1_ == null) {
          Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
        }
        Msg1.MergeFrom(other.Msg1);
      }
      if (other.Warning.Length != 0) {
        Warning = other.Warning;
      }
      if (other.OriginalWarning.Length != 0) {
        OriginalWarning = other.OriginalWarning;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msg1_ == null) {
              Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
            }
            input.ReadMessage(Msg1);
            break;
          }
          case 18: {
            Warning = input.ReadBytes();
            break;
          }
          case 26: {
            OriginalWarning = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (msg1_ == null) {
              Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
            }
            input.ReadMessage(Msg1);
            break;
          }
          case 18: {
            Warning = input.ReadBytes();
            break;
          }
          case 26: {
            OriginalWarning = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SeriePeriodByCodeWithStandarDeviationResponse : pb::IMessage<SeriePeriodByCodeWithStandarDeviationResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SeriePeriodByCodeWithStandarDeviationResponse> _parser = new pb::MessageParser<SeriePeriodByCodeWithStandarDeviationResponse>(() => new SeriePeriodByCodeWithStandarDeviationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeriePeriodByCodeWithStandarDeviationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeriePeriodByCodeWithStandarDeviationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeriePeriodByCodeWithStandarDeviationResponse(SeriePeriodByCodeWithStandarDeviationResponse other) : this() {
      msg1_ = other.msg1_ != null ? other.msg1_.Clone() : null;
      standardDeviation_ = other.standardDeviation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeriePeriodByCodeWithStandarDeviationResponse Clone() {
      return new SeriePeriodByCodeWithStandarDeviationResponse(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    private global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse msg1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse Msg1 {
      get { return msg1_; }
      set {
        msg1_ = value;
      }
    }

    /// <summary>Field number for the "standardDeviation" field.</summary>
    public const int StandardDeviationFieldNumber = 2;
    private double standardDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StandardDeviation {
      get { return standardDeviation_; }
      set {
        standardDeviation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeriePeriodByCodeWithStandarDeviationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeriePeriodByCodeWithStandarDeviationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StandardDeviation, other.StandardDeviation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msg1_ != null) hash ^= Msg1.GetHashCode();
      if (StandardDeviation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StandardDeviation);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (msg1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (StandardDeviation != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StandardDeviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (msg1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (StandardDeviation != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StandardDeviation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msg1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (StandardDeviation != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeriePeriodByCodeWithStandarDeviationResponse other) {
      if (other == null) {
        return;
      }
      if (other.msg1_ != null) {
        if (msg1_ == null) {
          Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
        }
        Msg1.MergeFrom(other.Msg1);
      }
      if (other.StandardDeviation != 0D) {
        StandardDeviation = other.StandardDeviation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msg1_ == null) {
              Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
            }
            input.ReadMessage(Msg1);
            break;
          }
          case 17: {
            StandardDeviation = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (msg1_ == null) {
              Msg1 = new global::PltWindTurbine.Services.ObtainInfoTurbinesService.OnlySerieByPeriodAndCodeResponse();
            }
            input.ReadMessage(Msg1);
            break;
          }
          case 17: {
            StandardDeviation = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
