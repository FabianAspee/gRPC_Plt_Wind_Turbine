// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ObtainInfoTurbinesProto/obtaininfoturbine.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PltWindTurbine.Services.ObtainInfoTurbinesService {
  public static partial class ObtainInfoTurbines
  {
    static readonly string __ServiceName = "obtaininfoturbine.ObtainInfoTurbines";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest> __Marshaller_obtaininfoturbine_CodeAndPeriodRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse> __Marshaller_obtaininfoturbine_CodeAndPeriodResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor> __Marshaller_obtaininfoturbine_TurbineOrSensor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor> __Marshaller_obtaininfoturbine_ResponseNameTurbineAndSensor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage> __Marshaller_obtaininfoturbine_WithoutMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse> __Marshaller_obtaininfoturbine_ChartSystemResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest> __Marshaller_obtaininfoturbine_ErrorByTurbineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse> __Marshaller_obtaininfoturbine_ErrorByTurbineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse.Parser));

    static readonly grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest, global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse> __Method_InfoFailureTurbine = new grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest, global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "InfoFailureTurbine",
        __Marshaller_obtaininfoturbine_CodeAndPeriodRequest,
        __Marshaller_obtaininfoturbine_CodeAndPeriodResponse);

    static readonly grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor> __Method_GetNameTurbineAndSensor = new grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetNameTurbineAndSensor",
        __Marshaller_obtaininfoturbine_TurbineOrSensor,
        __Marshaller_obtaininfoturbine_ResponseNameTurbineAndSensor);

    static readonly grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse> __Method_GetChartSystem = new grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChartSystem",
        __Marshaller_obtaininfoturbine_WithoutMessage,
        __Marshaller_obtaininfoturbine_ChartSystemResponse);

    static readonly grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse> __Method_GetErrorByTurbine = new grpc::Method<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetErrorByTurbine",
        __Marshaller_obtaininfoturbine_ErrorByTurbineRequest,
        __Marshaller_obtaininfoturbine_ErrorByTurbineResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PltWindTurbine.Services.ObtainInfoTurbinesService.ObtaininfoturbineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ObtainInfoTurbines</summary>
    public partial class ObtainInfoTurbinesClient : grpc::ClientBase<ObtainInfoTurbinesClient>
    {
      /// <summary>Creates a new client for ObtainInfoTurbines</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ObtainInfoTurbinesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ObtainInfoTurbines that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ObtainInfoTurbinesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ObtainInfoTurbinesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ObtainInfoTurbinesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest, global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse> InfoFailureTurbine(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InfoFailureTurbine(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodRequest, global::PltWindTurbine.Services.ObtainInfoTurbinesService.CodeAndPeriodResponse> InfoFailureTurbine(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_InfoFailureTurbine, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor> GetNameTurbineAndSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNameTurbineAndSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.TurbineOrSensor, global::PltWindTurbine.Services.ObtainInfoTurbinesService.ResponseNameTurbineAndSensor> GetNameTurbineAndSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetNameTurbineAndSensor, null, options);
      }
      public virtual global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse GetChartSystem(global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChartSystem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse GetChartSystem(global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChartSystem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse> GetChartSystemAsync(global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChartSystemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ChartSystemResponse> GetChartSystemAsync(global::PltWindTurbine.Services.ObtainInfoTurbinesService.WithoutMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChartSystem, null, options, request);
      }
      public virtual global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse GetErrorByTurbine(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetErrorByTurbine(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse GetErrorByTurbine(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetErrorByTurbine, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse> GetErrorByTurbineAsync(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetErrorByTurbineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineResponse> GetErrorByTurbineAsync(global::PltWindTurbine.Services.ObtainInfoTurbinesService.ErrorByTurbineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetErrorByTurbine, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ObtainInfoTurbinesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ObtainInfoTurbinesClient(configuration);
      }
    }

  }
}
#endregion
