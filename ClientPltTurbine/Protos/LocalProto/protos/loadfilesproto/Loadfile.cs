// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/LoadFilesProto/loadfile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PltWindTurbine.Services.LoadFilesService {

  /// <summary>Holder for reflection information generated from Protos/LoadFilesProto/loadfile.proto</summary>
  public static partial class LoadfileReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/LoadFilesProto/loadfile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoadfileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRQcm90b3MvTG9hZEZpbGVzUHJvdG8vbG9hZGZpbGUucHJvdG8SCGxvYWRm",
            "aWxlGh5Qcm90b3MvVXRpbFByb3RvL3V0aWxpdHkucHJvdG8iqgEKDlJlYWRJ",
            "bmZvU2Vuc29yEioKBG1zZzEYASABKAsyGi5sb2FkZmlsZS5SZWFkTm9ybWFs",
            "U2Vuc29ySAASKQoEbXNnMhgCIAEoCzIZLmxvYWRmaWxlLlJlYWRFdmVudFNl",
            "bnNvckgAEhAKCGlzVXBsb2FkGAUgASgIEhYKDnRvdGFsRGltZW5zaW9uGAYg",
            "ASgDEg0KBWJsb2NrGAcgASgFQggKBkFjdGlvbiJCChBSZWFkTm9ybWFsU2Vu",
            "c29yEi4KBWZpbGVzGAEgASgLMh8ubG9hZGZpbGUuRmlsZVVwbG9hZFJlcXVl",
            "c3RJbmZvIkEKD1JlYWRFdmVudFNlbnNvchIuCgVmaWxlcxgBIAEoCzIfLmxv",
            "YWRmaWxlLkZpbGVVcGxvYWRSZXF1ZXN0SW5mbyLzAQoRRmlsZVVwbG9hZFJl",
            "cXVlc3QSJQoEbXNnMRgBIAEoCzIVLmxvYWRmaWxlLkluZm9UdXJiaW5lSAAS",
            "JAoEbXNnMhgCIAEoCzIULmxvYWRmaWxlLk5hbWVTZW5zb3JIABIpCgRtc2cz",
            "GAMgASgLMhkubG9hZGZpbGUuTmFtZUVycm9yU2Vuc29ySAASIwoEbXNnNBgE",
            "IAEoCzITLmxvYWRmaWxlLkVycm9yQ29kZUgAEhAKCGlzVXBsb2FkGAUgASgI",
            "EhYKDnRvdGFsRGltZW5zaW9uGAYgASgDEg0KBWJsb2NrGAcgASgFQggKBkFj",
            "dGlvbiJPCgtJbmZvVHVyYmluZRItCgRmaWxlGAEgASgLMh8ubG9hZGZpbGUu",
            "RmlsZVVwbG9hZFJlcXVlc3RJbmZvEhEKCW5hbWVUYWJsZRgCIAEoCSJOCgpO",
            "YW1lU2Vuc29yEi0KBGZpbGUYASABKAsyHy5sb2FkZmlsZS5GaWxlVXBsb2Fk",
            "UmVxdWVzdEluZm8SEQoJbmFtZVRhYmxlGAIgASgJIlMKD05hbWVFcnJvclNl",
            "bnNvchItCgRmaWxlGAEgASgLMh8ubG9hZGZpbGUuRmlsZVVwbG9hZFJlcXVl",
            "c3RJbmZvEhEKCW5hbWVUYWJsZRgCIAEoCSJNCglFcnJvckNvZGUSLQoEZmls",
            "ZRgBIAEoCzIfLmxvYWRmaWxlLkZpbGVVcGxvYWRSZXF1ZXN0SW5mbxIRCglu",
            "YW1lVGFibGUYAiABKAkiWwoVRmlsZVVwbG9hZFJlcXVlc3RJbmZvEiQKCG1l",
            "dGFkYXRhGAEgASgLMhIubG9hZGZpbGUuTWV0YURhdGESHAoEZmlsZRgCIAEo",
            "CzIOLmxvYWRmaWxlLkZpbGUiJgoITWV0YURhdGESDAoEbmFtZRgBIAEoCRIM",
            "CgR0eXBlGAIgASgJIioKBEZpbGUSDwoHY29udGVudBgBIAEoDBIRCglzZXBh",
            "cmF0b3IYAiABKAkiWAoSRmlsZVVwbG9hZFJlc3BvbnNlEgwKBG5hbWUYASAB",
            "KAkSHwoGc3RhdHVzGAIgASgOMg8udXRpbGl0eS5TdGF0dXMSEwoLZGVzY3Jp",
            "cHRpb24YAyABKAkyrAEKCUxvYWRGaWxlcxJVChRMb2FkRmlsZXNJbmZvVHVy",
            "YmluZRIbLmxvYWRmaWxlLkZpbGVVcGxvYWRSZXF1ZXN0GhwubG9hZGZpbGUu",
            "RmlsZVVwbG9hZFJlc3BvbnNlKAEwARJICgpSZWFkU2Vuc29yEhgubG9hZGZp",
            "bGUuUmVhZEluZm9TZW5zb3IaHC5sb2FkZmlsZS5GaWxlVXBsb2FkUmVzcG9u",
            "c2UoATABQiuqAihQbHRXaW5kVHVyYmluZS5TZXJ2aWNlcy5Mb2FkRmlsZXNT",
            "ZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PltWindTurbine.Protos.UtilProto.UtilityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor), global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor.Parser, new[]{ "Msg1", "Msg2", "IsUpload", "TotalDimension", "Block" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor), global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor.Parser, new[]{ "Files" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor), global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor.Parser, new[]{ "Files" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest), global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest.Parser, new[]{ "Msg1", "Msg2", "Msg3", "Msg4", "IsUpload", "TotalDimension", "Block" }, new[]{ "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.InfoTurbine), global::PltWindTurbine.Services.LoadFilesService.InfoTurbine.Parser, new[]{ "File", "NameTable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.NameSensor), global::PltWindTurbine.Services.LoadFilesService.NameSensor.Parser, new[]{ "File", "NameTable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor), global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor.Parser, new[]{ "File", "NameTable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.ErrorCode), global::PltWindTurbine.Services.LoadFilesService.ErrorCode.Parser, new[]{ "File", "NameTable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo), global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo.Parser, new[]{ "Metadata", "File" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.MetaData), global::PltWindTurbine.Services.LoadFilesService.MetaData.Parser, new[]{ "Name", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.File), global::PltWindTurbine.Services.LoadFilesService.File.Parser, new[]{ "Content", "Separator" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse), global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse.Parser, new[]{ "Name", "Status", "Description" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReadInfoSensor : pb::IMessage<ReadInfoSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadInfoSensor> _parser = new pb::MessageParser<ReadInfoSensor>(() => new ReadInfoSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadInfoSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadInfoSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadInfoSensor(ReadInfoSensor other) : this() {
      isUpload_ = other.isUpload_;
      totalDimension_ = other.totalDimension_;
      block_ = other.block_;
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          Msg1 = other.Msg1.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadInfoSensor Clone() {
      return new ReadInfoSensor(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor Msg1 {
      get { return actionCase_ == ActionOneofCase.Msg1 ? (global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg1;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    /// <summary>Field number for the "isUpload" field.</summary>
    public const int IsUploadFieldNumber = 5;
    private bool isUpload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpload {
      get { return isUpload_; }
      set {
        isUpload_ = value;
      }
    }

    /// <summary>Field number for the "totalDimension" field.</summary>
    public const int TotalDimensionFieldNumber = 6;
    private long totalDimension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalDimension {
      get { return totalDimension_; }
      set {
        totalDimension_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 7;
    private int block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg1 = 1,
      Msg2 = 2,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadInfoSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadInfoSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (IsUpload != other.IsUpload) return false;
      if (TotalDimension != other.TotalDimension) return false;
      if (Block != other.Block) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg1) hash ^= Msg1.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      if (IsUpload != false) hash ^= IsUpload.GetHashCode();
      if (TotalDimension != 0L) hash ^= TotalDimension.GetHashCode();
      if (Block != 0) hash ^= Block.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (IsUpload != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUpload);
      }
      if (TotalDimension != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalDimension);
      }
      if (Block != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (IsUpload != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUpload);
      }
      if (TotalDimension != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalDimension);
      }
      if (Block != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg1) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (IsUpload != false) {
        size += 1 + 1;
      }
      if (TotalDimension != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalDimension);
      }
      if (Block != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadInfoSensor other) {
      if (other == null) {
        return;
      }
      if (other.IsUpload != false) {
        IsUpload = other.IsUpload;
      }
      if (other.TotalDimension != 0L) {
        TotalDimension = other.TotalDimension;
      }
      if (other.Block != 0) {
        Block = other.Block;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          if (Msg1 == null) {
            Msg1 = new global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor();
          }
          Msg1.MergeFrom(other.Msg1);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 40: {
            IsUpload = input.ReadBool();
            break;
          }
          case 48: {
            TotalDimension = input.ReadInt64();
            break;
          }
          case 56: {
            Block = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.ReadNormalSensor();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.ReadEventSensor();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 40: {
            IsUpload = input.ReadBool();
            break;
          }
          case 48: {
            TotalDimension = input.ReadInt64();
            break;
          }
          case 56: {
            Block = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReadNormalSensor : pb::IMessage<ReadNormalSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadNormalSensor> _parser = new pb::MessageParser<ReadNormalSensor>(() => new ReadNormalSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadNormalSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadNormalSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadNormalSensor(ReadNormalSensor other) : this() {
      files_ = other.files_ != null ? other.files_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadNormalSensor Clone() {
      return new ReadNormalSensor(this);
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo files_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo Files {
      get { return files_; }
      set {
        files_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadNormalSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadNormalSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Files, other.Files)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (files_ != null) hash ^= Files.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (files_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Files);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (files_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Files);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (files_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Files);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadNormalSensor other) {
      if (other == null) {
        return;
      }
      if (other.files_ != null) {
        if (files_ == null) {
          Files = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
        }
        Files.MergeFrom(other.Files);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (files_ == null) {
              Files = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(Files);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (files_ == null) {
              Files = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(Files);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReadEventSensor : pb::IMessage<ReadEventSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadEventSensor> _parser = new pb::MessageParser<ReadEventSensor>(() => new ReadEventSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadEventSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEventSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEventSensor(ReadEventSensor other) : this() {
      files_ = other.files_ != null ? other.files_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEventSensor Clone() {
      return new ReadEventSensor(this);
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo files_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo Files {
      get { return files_; }
      set {
        files_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadEventSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadEventSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Files, other.Files)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (files_ != null) hash ^= Files.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (files_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Files);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (files_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Files);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (files_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Files);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadEventSensor other) {
      if (other == null) {
        return;
      }
      if (other.files_ != null) {
        if (files_ == null) {
          Files = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
        }
        Files.MergeFrom(other.Files);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (files_ == null) {
              Files = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(Files);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (files_ == null) {
              Files = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(Files);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FileUploadRequest : pb::IMessage<FileUploadRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FileUploadRequest> _parser = new pb::MessageParser<FileUploadRequest>(() => new FileUploadRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileUploadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadRequest(FileUploadRequest other) : this() {
      isUpload_ = other.isUpload_;
      totalDimension_ = other.totalDimension_;
      block_ = other.block_;
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          Msg1 = other.Msg1.Clone();
          break;
        case ActionOneofCase.Msg2:
          Msg2 = other.Msg2.Clone();
          break;
        case ActionOneofCase.Msg3:
          Msg3 = other.Msg3.Clone();
          break;
        case ActionOneofCase.Msg4:
          Msg4 = other.Msg4.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadRequest Clone() {
      return new FileUploadRequest(this);
    }

    /// <summary>Field number for the "msg1" field.</summary>
    public const int Msg1FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.InfoTurbine Msg1 {
      get { return actionCase_ == ActionOneofCase.Msg1 ? (global::PltWindTurbine.Services.LoadFilesService.InfoTurbine) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg1;
      }
    }

    /// <summary>Field number for the "msg2" field.</summary>
    public const int Msg2FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.NameSensor Msg2 {
      get { return actionCase_ == ActionOneofCase.Msg2 ? (global::PltWindTurbine.Services.LoadFilesService.NameSensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg2;
      }
    }

    /// <summary>Field number for the "msg3" field.</summary>
    public const int Msg3FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor Msg3 {
      get { return actionCase_ == ActionOneofCase.Msg3 ? (global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg3;
      }
    }

    /// <summary>Field number for the "msg4" field.</summary>
    public const int Msg4FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.ErrorCode Msg4 {
      get { return actionCase_ == ActionOneofCase.Msg4 ? (global::PltWindTurbine.Services.LoadFilesService.ErrorCode) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Msg4;
      }
    }

    /// <summary>Field number for the "isUpload" field.</summary>
    public const int IsUploadFieldNumber = 5;
    private bool isUpload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpload {
      get { return isUpload_; }
      set {
        isUpload_ = value;
      }
    }

    /// <summary>Field number for the "totalDimension" field.</summary>
    public const int TotalDimensionFieldNumber = 6;
    private long totalDimension_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalDimension {
      get { return totalDimension_; }
      set {
        totalDimension_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 7;
    private int block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "Action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Msg1 = 1,
      Msg2 = 2,
      Msg3 = 3,
      Msg4 = 4,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileUploadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileUploadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg1, other.Msg1)) return false;
      if (!object.Equals(Msg2, other.Msg2)) return false;
      if (!object.Equals(Msg3, other.Msg3)) return false;
      if (!object.Equals(Msg4, other.Msg4)) return false;
      if (IsUpload != other.IsUpload) return false;
      if (TotalDimension != other.TotalDimension) return false;
      if (Block != other.Block) return false;
      if (ActionCase != other.ActionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Msg1) hash ^= Msg1.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg2) hash ^= Msg2.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg3) hash ^= Msg3.GetHashCode();
      if (actionCase_ == ActionOneofCase.Msg4) hash ^= Msg4.GetHashCode();
      if (IsUpload != false) hash ^= IsUpload.GetHashCode();
      if (TotalDimension != 0L) hash ^= TotalDimension.GetHashCode();
      if (Block != 0) hash ^= Block.GetHashCode();
      hash ^= (int) actionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg4);
      }
      if (IsUpload != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUpload);
      }
      if (TotalDimension != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalDimension);
      }
      if (Block != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (actionCase_ == ActionOneofCase.Msg1) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        output.WriteRawTag(34);
        output.WriteMessage(Msg4);
      }
      if (IsUpload != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUpload);
      }
      if (TotalDimension != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalDimension);
      }
      if (Block != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Msg1) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg1);
      }
      if (actionCase_ == ActionOneofCase.Msg2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg2);
      }
      if (actionCase_ == ActionOneofCase.Msg3) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg3);
      }
      if (actionCase_ == ActionOneofCase.Msg4) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg4);
      }
      if (IsUpload != false) {
        size += 1 + 1;
      }
      if (TotalDimension != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalDimension);
      }
      if (Block != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileUploadRequest other) {
      if (other == null) {
        return;
      }
      if (other.IsUpload != false) {
        IsUpload = other.IsUpload;
      }
      if (other.TotalDimension != 0L) {
        TotalDimension = other.TotalDimension;
      }
      if (other.Block != 0) {
        Block = other.Block;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Msg1:
          if (Msg1 == null) {
            Msg1 = new global::PltWindTurbine.Services.LoadFilesService.InfoTurbine();
          }
          Msg1.MergeFrom(other.Msg1);
          break;
        case ActionOneofCase.Msg2:
          if (Msg2 == null) {
            Msg2 = new global::PltWindTurbine.Services.LoadFilesService.NameSensor();
          }
          Msg2.MergeFrom(other.Msg2);
          break;
        case ActionOneofCase.Msg3:
          if (Msg3 == null) {
            Msg3 = new global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor();
          }
          Msg3.MergeFrom(other.Msg3);
          break;
        case ActionOneofCase.Msg4:
          if (Msg4 == null) {
            Msg4 = new global::PltWindTurbine.Services.LoadFilesService.ErrorCode();
          }
          Msg4.MergeFrom(other.Msg4);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PltWindTurbine.Services.LoadFilesService.InfoTurbine subBuilder = new global::PltWindTurbine.Services.LoadFilesService.InfoTurbine();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.LoadFilesService.NameSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.NameSensor();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
          case 34: {
            global::PltWindTurbine.Services.LoadFilesService.ErrorCode subBuilder = new global::PltWindTurbine.Services.LoadFilesService.ErrorCode();
            if (actionCase_ == ActionOneofCase.Msg4) {
              subBuilder.MergeFrom(Msg4);
            }
            input.ReadMessage(subBuilder);
            Msg4 = subBuilder;
            break;
          }
          case 40: {
            IsUpload = input.ReadBool();
            break;
          }
          case 48: {
            TotalDimension = input.ReadInt64();
            break;
          }
          case 56: {
            Block = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PltWindTurbine.Services.LoadFilesService.InfoTurbine subBuilder = new global::PltWindTurbine.Services.LoadFilesService.InfoTurbine();
            if (actionCase_ == ActionOneofCase.Msg1) {
              subBuilder.MergeFrom(Msg1);
            }
            input.ReadMessage(subBuilder);
            Msg1 = subBuilder;
            break;
          }
          case 18: {
            global::PltWindTurbine.Services.LoadFilesService.NameSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.NameSensor();
            if (actionCase_ == ActionOneofCase.Msg2) {
              subBuilder.MergeFrom(Msg2);
            }
            input.ReadMessage(subBuilder);
            Msg2 = subBuilder;
            break;
          }
          case 26: {
            global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor subBuilder = new global::PltWindTurbine.Services.LoadFilesService.NameErrorSensor();
            if (actionCase_ == ActionOneofCase.Msg3) {
              subBuilder.MergeFrom(Msg3);
            }
            input.ReadMessage(subBuilder);
            Msg3 = subBuilder;
            break;
          }
          case 34: {
            global::PltWindTurbine.Services.LoadFilesService.ErrorCode subBuilder = new global::PltWindTurbine.Services.LoadFilesService.ErrorCode();
            if (actionCase_ == ActionOneofCase.Msg4) {
              subBuilder.MergeFrom(Msg4);
            }
            input.ReadMessage(subBuilder);
            Msg4 = subBuilder;
            break;
          }
          case 40: {
            IsUpload = input.ReadBool();
            break;
          }
          case 48: {
            TotalDimension = input.ReadInt64();
            break;
          }
          case 56: {
            Block = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InfoTurbine : pb::IMessage<InfoTurbine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfoTurbine> _parser = new pb::MessageParser<InfoTurbine>(() => new InfoTurbine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfoTurbine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTurbine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTurbine(InfoTurbine other) : this() {
      file_ = other.file_ != null ? other.file_.Clone() : null;
      nameTable_ = other.nameTable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfoTurbine Clone() {
      return new InfoTurbine(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo file_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo File {
      get { return file_; }
      set {
        file_ = value;
      }
    }

    /// <summary>Field number for the "nameTable" field.</summary>
    public const int NameTableFieldNumber = 2;
    private string nameTable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTable {
      get { return nameTable_; }
      set {
        nameTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfoTurbine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfoTurbine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(File, other.File)) return false;
      if (NameTable != other.NameTable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (file_ != null) hash ^= File.GetHashCode();
      if (NameTable.Length != 0) hash ^= NameTable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (file_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      if (NameTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfoTurbine other) {
      if (other == null) {
        return;
      }
      if (other.file_ != null) {
        if (file_ == null) {
          File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
        }
        File.MergeFrom(other.File);
      }
      if (other.NameTable.Length != 0) {
        NameTable = other.NameTable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NameSensor : pb::IMessage<NameSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NameSensor> _parser = new pb::MessageParser<NameSensor>(() => new NameSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameSensor(NameSensor other) : this() {
      file_ = other.file_ != null ? other.file_.Clone() : null;
      nameTable_ = other.nameTable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameSensor Clone() {
      return new NameSensor(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo file_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo File {
      get { return file_; }
      set {
        file_ = value;
      }
    }

    /// <summary>Field number for the "nameTable" field.</summary>
    public const int NameTableFieldNumber = 2;
    private string nameTable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTable {
      get { return nameTable_; }
      set {
        nameTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(File, other.File)) return false;
      if (NameTable != other.NameTable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (file_ != null) hash ^= File.GetHashCode();
      if (NameTable.Length != 0) hash ^= NameTable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (file_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      if (NameTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameSensor other) {
      if (other == null) {
        return;
      }
      if (other.file_ != null) {
        if (file_ == null) {
          File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
        }
        File.MergeFrom(other.File);
      }
      if (other.NameTable.Length != 0) {
        NameTable = other.NameTable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NameErrorSensor : pb::IMessage<NameErrorSensor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NameErrorSensor> _parser = new pb::MessageParser<NameErrorSensor>(() => new NameErrorSensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameErrorSensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameErrorSensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameErrorSensor(NameErrorSensor other) : this() {
      file_ = other.file_ != null ? other.file_.Clone() : null;
      nameTable_ = other.nameTable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameErrorSensor Clone() {
      return new NameErrorSensor(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo file_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo File {
      get { return file_; }
      set {
        file_ = value;
      }
    }

    /// <summary>Field number for the "nameTable" field.</summary>
    public const int NameTableFieldNumber = 2;
    private string nameTable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTable {
      get { return nameTable_; }
      set {
        nameTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameErrorSensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameErrorSensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(File, other.File)) return false;
      if (NameTable != other.NameTable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (file_ != null) hash ^= File.GetHashCode();
      if (NameTable.Length != 0) hash ^= NameTable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (file_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      if (NameTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameErrorSensor other) {
      if (other == null) {
        return;
      }
      if (other.file_ != null) {
        if (file_ == null) {
          File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
        }
        File.MergeFrom(other.File);
      }
      if (other.NameTable.Length != 0) {
        NameTable = other.NameTable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ErrorCode : pb::IMessage<ErrorCode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ErrorCode> _parser = new pb::MessageParser<ErrorCode>(() => new ErrorCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorCode(ErrorCode other) : this() {
      file_ = other.file_ != null ? other.file_.Clone() : null;
      nameTable_ = other.nameTable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorCode Clone() {
      return new ErrorCode(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo file_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo File {
      get { return file_; }
      set {
        file_ = value;
      }
    }

    /// <summary>Field number for the "nameTable" field.</summary>
    public const int NameTableFieldNumber = 2;
    private string nameTable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTable {
      get { return nameTable_; }
      set {
        nameTable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(File, other.File)) return false;
      if (NameTable != other.NameTable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (file_ != null) hash ^= File.GetHashCode();
      if (NameTable.Length != 0) hash ^= NameTable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (file_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(File);
      }
      if (NameTable.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NameTable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (file_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      if (NameTable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorCode other) {
      if (other == null) {
        return;
      }
      if (other.file_ != null) {
        if (file_ == null) {
          File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
        }
        File.MergeFrom(other.File);
      }
      if (other.NameTable.Length != 0) {
        NameTable = other.NameTable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.FileUploadRequestInfo();
            }
            input.ReadMessage(File);
            break;
          }
          case 18: {
            NameTable = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FileUploadRequestInfo : pb::IMessage<FileUploadRequestInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FileUploadRequestInfo> _parser = new pb::MessageParser<FileUploadRequestInfo>(() => new FileUploadRequestInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileUploadRequestInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadRequestInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadRequestInfo(FileUploadRequestInfo other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      file_ = other.file_ != null ? other.file_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadRequestInfo Clone() {
      return new FileUploadRequestInfo(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::PltWindTurbine.Services.LoadFilesService.MetaData metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.MetaData Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 2;
    private global::PltWindTurbine.Services.LoadFilesService.File file_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Services.LoadFilesService.File File {
      get { return file_; }
      set {
        file_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileUploadRequestInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileUploadRequestInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(File, other.File)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (file_ != null) hash ^= File.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (file_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(File);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (file_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(File);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (file_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileUploadRequestInfo other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::PltWindTurbine.Services.LoadFilesService.MetaData();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.file_ != null) {
        if (file_ == null) {
          File = new global::PltWindTurbine.Services.LoadFilesService.File();
        }
        File.MergeFrom(other.File);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::PltWindTurbine.Services.LoadFilesService.MetaData();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.File();
            }
            input.ReadMessage(File);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::PltWindTurbine.Services.LoadFilesService.MetaData();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (file_ == null) {
              File = new global::PltWindTurbine.Services.LoadFilesService.File();
            }
            input.ReadMessage(File);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MetaData : pb::IMessage<MetaData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MetaData> _parser = new pb::MessageParser<MetaData>(() => new MetaData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaData(MetaData other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaData Clone() {
      return new MetaData(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetaData other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class File : pb::IMessage<File>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<File> _parser = new pb::MessageParser<File>(() => new File());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<File> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public File() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public File(File other) : this() {
      content_ = other.content_;
      separator_ = other.separator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public File Clone() {
      return new File(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "separator" field.</summary>
    public const int SeparatorFieldNumber = 2;
    private string separator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Separator {
      get { return separator_; }
      set {
        separator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as File);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(File other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (Separator != other.Separator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Separator.Length != 0) hash ^= Separator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (Separator.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Separator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (Separator.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Separator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (Separator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Separator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(File other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Separator.Length != 0) {
        Separator = other.Separator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
          case 18: {
            Separator = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
          case 18: {
            Separator = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FileUploadResponse : pb::IMessage<FileUploadResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FileUploadResponse> _parser = new pb::MessageParser<FileUploadResponse>(() => new FileUploadResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileUploadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadResponse(FileUploadResponse other) : this() {
      name_ = other.name_;
      status_ = other.status_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileUploadResponse Clone() {
      return new FileUploadResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::PltWindTurbine.Protos.UtilProto.Status status_ = global::PltWindTurbine.Protos.UtilProto.Status.Pending;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PltWindTurbine.Protos.UtilProto.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileUploadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileUploadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) hash ^= Status.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileUploadResponse other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != global::PltWindTurbine.Protos.UtilProto.Status.Pending) {
        Status = other.Status;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::PltWindTurbine.Protos.UtilProto.Status) input.ReadEnum();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::PltWindTurbine.Protos.UtilProto.Status) input.ReadEnum();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
