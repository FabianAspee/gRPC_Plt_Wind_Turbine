// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/LoadFilesProto/loadfile.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PltWindTurbine.Services.LoadFilesService {
  public static partial class LoadFiles
  {
    static readonly string __ServiceName = "loadfile.LoadFiles";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest> __Marshaller_loadfile_FileUploadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> __Marshaller_loadfile_FileUploadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse.Parser));
    static readonly grpc::Marshaller<global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor> __Marshaller_loadfile_ReadInfoSensor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor.Parser));

    static readonly grpc::Method<global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> __Method_LoadFilesInfoTurbine = new grpc::Method<global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "LoadFilesInfoTurbine",
        __Marshaller_loadfile_FileUploadRequest,
        __Marshaller_loadfile_FileUploadResponse);

    static readonly grpc::Method<global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> __Method_ReadSensor = new grpc::Method<global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ReadSensor",
        __Marshaller_loadfile_ReadInfoSensor,
        __Marshaller_loadfile_FileUploadResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PltWindTurbine.Services.LoadFilesService.LoadfileReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for LoadFiles</summary>
    public partial class LoadFilesClient : grpc::ClientBase<LoadFilesClient>
    {
      /// <summary>Creates a new client for LoadFiles</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoadFilesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LoadFiles that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoadFilesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoadFilesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoadFilesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> LoadFilesInfoTurbine(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadFilesInfoTurbine(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.LoadFilesService.FileUploadRequest, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> LoadFilesInfoTurbine(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_LoadFilesInfoTurbine, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> ReadSensor(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadSensor(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::PltWindTurbine.Services.LoadFilesService.ReadInfoSensor, global::PltWindTurbine.Services.LoadFilesService.FileUploadResponse> ReadSensor(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ReadSensor, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LoadFilesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoadFilesClient(configuration);
      }
    }

  }
}
#endregion
